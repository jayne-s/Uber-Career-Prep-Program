#include <iostream>
#include <jsoncpp/json/json.h>
using namespace std;
#include <algorithm>
#include <vector>
/*
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.

target  = 0
curr = nums[0] + nums[1]


[-1,0,1,2,-1,-4]
i = -1 
j = 0


i = 0
j = 1

endPtr = 2 
[-4, -1, -1, 0, 1, 2]

-4 + -1 = -5 / 5 

-4  + 0 = 4

*/




vector<vector<int>> threeSum(vector<int> num){
  vector<vector<int>> sets;
  int target = 0;
  int sum = 0;
  int findNum = 0;
  
  for(int i = 0,j=1; j < num.size(); i++,j++){
    sum = num[i]+num[j];
    findNum = target - sum;
    
    if(find(num.begin(), num.end(), findNum) != num.end()){

      sets.push_back(num[i], num[j], findNum);
    }
  }
  
  
}

int main() {
  std::cout << "Hello world" << std::endl;
  return 0;
}
